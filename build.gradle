plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'meltingpot'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

war {
	archiveFileName = 'meltingpot.war'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
	implementation 'org.springframework.security:spring-security-messaging'

	// mail
	implementation 'org.springframework.boot:spring-boot-starter-mail:3.0.5'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	// implementation 'org.springframework:spring-messaging:6.0.3'
	implementation 'software.amazon.ion:ion-java:1.0.3'
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	// firebase
	implementation 'com.google.firebase:firebase-admin:9.2.0'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.16.1'

	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	if (isAppleSilicon()) {
		runtimeOnly("io.netty:netty-resolver-dns-native-macos:4.1.94.Final:osx-aarch_64")
	}

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
}

tasks.named('test') {
	useJUnitPlatform()
}

static boolean isAppleSilicon() {
	System.getProperty("os.name") == "Mac OS X" && System.getProperty("os.arch") == "aarch64"
}